[{"D:\\Internship\\Housie\\frontend\\src\\index.js":"1","D:\\Internship\\Housie\\frontend\\src\\App.js":"2","D:\\Internship\\Housie\\frontend\\src\\reportWebVitals.js":"3","D:\\Internship\\Housie\\frontend\\src\\Components\\Index.js":"4","D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavBar.js":"5","D:\\Internship\\Housie\\frontend\\src\\Redux\\store.js":"6","D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Reducers.js":"7","D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Types.js":"8","D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Action.js":"9","D:\\Internship\\Housie\\frontend\\src\\Components\\Login.js":"10","D:\\Internship\\Housie\\frontend\\src\\Components\\UserRegistration.js":"11","D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavbarComponents\\ShowAllGames.js":"12","D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavbarComponents\\CreateGameForm.js":"13","D:\\Internship\\Housie\\frontend\\src\\Components\\IndexComponents\\ShowTable.js":"14"},{"size":542,"mtime":1612002258350,"results":"15","hashOfConfig":"16"},{"size":1193,"mtime":1612176110067,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":14084,"mtime":1612500815208,"results":"19","hashOfConfig":"16"},{"size":3649,"mtime":1612686839209,"results":"20","hashOfConfig":"16"},{"size":282,"mtime":1612340709180,"results":"21","hashOfConfig":"16"},{"size":2268,"mtime":1612498209467,"results":"22","hashOfConfig":"16"},{"size":550,"mtime":1612341924245,"results":"23","hashOfConfig":"16"},{"size":3717,"mtime":1612342221632,"results":"24","hashOfConfig":"16"},{"size":4857,"mtime":1612185539804,"results":"25","hashOfConfig":"16"},{"size":5176,"mtime":1612178546119,"results":"26","hashOfConfig":"16"},{"size":17645,"mtime":1612686205184,"results":"27","hashOfConfig":"16"},{"size":3760,"mtime":1612501901830,"results":"28","hashOfConfig":"16"},{"size":6919,"mtime":1612693181914,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"ov0tlu",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Internship\\Housie\\frontend\\src\\index.js",[],["64","65"],"D:\\Internship\\Housie\\frontend\\src\\App.js",["66"],"import logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport { BrowserRouter ,Switch, Route, Redirect } from 'react-router-dom'\nimport {createBrowserHistory} from 'history';\nimport ReactNotification from 'react-notifications-component'\nimport 'react-notifications-component/dist/theme.css'\nimport Index from './Components/Index';\nimport store from './Redux/store';\nimport Login from './Components/Login';\nimport UserRegistration from './Components/UserRegistration';\n\n\nconst history = createBrowserHistory()\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">    \n        <ReactNotification />     \n        \n        <BrowserRouter history={history}>\n          <Switch>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n            <Route path=\"/registration\">\n              <UserRegistration />\n            </Route>\n            <Route path=\"/index\">\n              <Index />\n            </Route>\n            {localStorage.getItem('tokn') ? <Redirect to=\"/index\"/> : <Redirect to=\"/login\"/>}\n          </Switch>\n        </BrowserRouter>  \n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","D:\\Internship\\Housie\\frontend\\src\\reportWebVitals.js",[],"D:\\Internship\\Housie\\frontend\\src\\Components\\Index.js",["67","68","69"],"import axios from 'axios';\r\nimport React, { Component, useState, useEffect } from 'react'\r\nimport { store } from 'react-notifications-component';\r\nimport { connect } from 'react-redux'\r\nimport { Card, CardBody, Row, Col, Button, CardHeader, Table } from 'reactstrap'\r\nimport NavBar from '../Layouts/NavBar';\r\nimport ShowTable from './IndexComponents/ShowTable.js'\r\n\r\nimport { MDBDataTable } from 'mdbreact'\r\n\r\nimport { selectNumber, selectGame, fetchWinners } from '../Redux/Housie/Action'\r\n\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            dataArray: this.props.dataArray,\r\n            topLine: [],\r\n            middleLine: [],\r\n            bottomLine: [],\r\n            fullHousie: [],\r\n            isDataReturned: false,\r\n            tableComponent: \"topLine\",\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (!localStorage.getItem('tokn')) {\r\n            window.location.href = \"/login\"\r\n        }\r\n        this.fetchOngoingGame();\r\n    }\r\n\r\n    fetchOngoingGame = () => {\r\n\r\n        axios.get(`http://localhost:3001/admin/game/ongoing/`,\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem(\"tokn\")}`\r\n                }\r\n            }).then(response => {                \r\n                if (response.data.statusCode === 200) {\r\n                    let data = response.data.result\r\n                    this.props.selectGame(JSON.stringify({ gameId: data._id, gameName: data.name, gameDateTime: data.gameDate, numUsers: data.users.length, done: data.done, uniqueName: data.uniqueName }))\r\n                    this.props.fetchWinners(data._id)\r\n                }\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    handleButtonClick = (num) => {\r\n\r\n        axios.post(`http://localhost:3001/admin/game/appeared/`, {\r\n            gid: this.props.gameData.gameId,\r\n            num: num\r\n        },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem(\"tokn\")}`\r\n                }\r\n            }).then(response => {\r\n                if (response.data.statusCode === 404) {\r\n                    store.addNotification({\r\n                        title: \"Error\",\r\n                        message: \"No Game Found\",\r\n                        type: \"info\",\r\n                        insert: \"top\",\r\n                        container: \"top-right\",\r\n                        animationIn: [\"animated\", \"fadeIn\"],\r\n                        animationOut: [\"animated\", \"fadeOut\"],\r\n                        dismiss: {\r\n                            duration: 2000,\r\n                            onScreen: true\r\n                        }\r\n                    });\r\n                }\r\n                if (response.data.statusCode === 200) {\r\n                    this.props.selectNumber(num)\r\n                }\r\n            }).catch(error => {\r\n                console.log(error)\r\n                store.addNotification({\r\n                    title: \"Error\",\r\n                    message: \"Internal Server Error\",\r\n                    type: \"danger\",\r\n                    insert: \"top\",\r\n                    container: \"top-right\",\r\n                    animationIn: [\"animated\", \"fadeIn\"],\r\n                    animationOut: [\"animated\", \"fadeOut\"],\r\n                    dismiss: {\r\n                        duration: 2000,\r\n                        onScreen: true\r\n                    }\r\n                });\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <NavBar />\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"my-4\">\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                            <div className=\"d-flex justify-content-between\">\r\n                                <h5><b>Name:</b> {this.props.gameData.gameName}</h5>\r\n                                <h5><b>Unique Name:</b> {this.props.gameData.uniqueName}</h5>\r\n                                <h5><b>Date/Time:</b> {this.props.gameData.gameDateTime}</h5>\r\n                                <h5><b>Users:</b> {this.props.gameData.numUsers}</h5>\r\n                            </div>\r\n                            </CardBody>\r\n                        </Card>\r\n                        \r\n                        {this.props.gameData.gameId ?\r\n                            <Card className=\"shadow my-3\">\r\n                                <CardBody>\r\n\r\n\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Card className=\"shadow-sm\">\r\n                                                <CardBody>\r\n                                                    {\r\n                                                        [...Array(99)].map((e, i) => {\r\n                                                            return (\r\n                                                                <Button className={\"btn m-1 \" + (this.props.dataArray.has(i + 1) ? \"btn-success\" : \"btn-info\")} key={i + 1} onClick={() => this.handleButtonClick(i + 1)} style={{ width: \"3rem\" }}>{i + 1}</Button>\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Card className=\"shadow-sm\">\r\n                                                <CardBody>\r\n                                                    {\r\n                                                        [...this.props.dataArray].map((item) => {\r\n                                                            return (\r\n                                                                <Button color=\"info\" key={item} className=\"m-1\" style={{ width: \"3rem\" }}>{item}</Button>\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardBody>\r\n                            </Card>\r\n\r\n                            :\r\n                            <Card className=\"shadow my-3\">\r\n                                <CardBody>\r\n                                    <h4>No Game Started Yet</h4>\r\n                                </CardBody>\r\n                            </Card>\r\n                        }\r\n\r\n                    </div>\r\n                    <div>\r\n                        {this.props.gameData.gameId ?\r\n                            <Card className=\"shadow my-5\">\r\n                                <CardBody>\r\n                                    <div className=\"d-flex justify-content-between h-100 my-3\">\r\n                                        <div>\r\n                                            <Button style={{ width: \"7rem\" }} onClick={() => this.setState({ tableComponent: \"topLine\" })}>Top Line</Button>\r\n                                        </div>\r\n                                        <div>\r\n                                            <Button style={{ width: \"7rem\" }} onClick={() => this.setState({ tableComponent: \"middleLine\" })}>Middle Line</Button>\r\n                                        </div>\r\n                                        <div>\r\n                                            <Button style={{ width: \"7rem\" }} onClick={() => this.setState({ tableComponent: \"bottomLine\" })}>Bottom Line</Button>\r\n                                        </div>\r\n                                        <div>\r\n                                            <Button style={{ width: \"7rem\" }} onClick={() => this.setState({ tableComponent: \"fullHousie\" })}>Full Housie</Button>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    <Row>\r\n                                        <Col md={7} className=\"text-left\">\r\n                                            {this.state.tableComponent === \"topLine\" ?\r\n                                                <ShowTable type={\"topLine\"} gameId={this.props.gameData.gameId} />\r\n                                                : <></>}\r\n                                            {this.state.tableComponent === \"middleLine\" ?\r\n                                                <ShowTable type={\"middleLine\"} gameId={this.props.gameData.gameId} />\r\n                                                : <></>}\r\n                                            {this.state.tableComponent === \"bottomLine\" ?\r\n                                                <ShowTable type={\"bottomLine\"} gameId={this.props.gameData.gameId} />\r\n                                                : <></>}\r\n                                            {this.state.tableComponent === \"fullHousie\" ?\r\n                                                <ShowTable type={\"fullHousie\"} gameId={this.props.gameData.gameId} />\r\n                                                : <></>}\r\n                                            {/* <Row className=\"text-left\">\r\n                                            \r\n                                            \r\n                                                \r\n                                            <Col md={6}>\r\n                                                <ShowTable type={\"middleLine\"} gameId={this.props.gameData.gameId} />   \r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <ShowTable type={\"bottomLine\"} gameId={this.props.gameData.gameId} />   \r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <ShowTable type={\"fullHousie\"} gameId={this.props.gameData.gameId} />\r\n                                            </Col>\r\n                                        </Row> */}\r\n                                        </Col>\r\n                                        <Col md={5} className=\"text-left\">\r\n                                            <Card className=\"shadow-sm\">\r\n                                                <CardHeader>\r\n                                                    <h6>Winners</h6>\r\n                                                </CardHeader>\r\n                                                <CardBody>\r\n                                                    <Table bordered>\r\n                                                        <thead>\r\n                                                            <tr>\r\n                                                                <th>#</th>\r\n                                                                <th>Users</th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                            <tr>\r\n                                                                <th scope=\"row\">Top Line</th>\r\n                                                                <td>{this.props.gameData.tLWinnerData !== \"\" ? this.props.gameData.tLWinnerData.mobile : \"\"}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <th scope=\"row\">Bottom Line</th>\r\n                                                                <td>{this.props.gameData.mLWinnerData !== \"\" ? this.props.gameData.mLWinnerData.mobile : \"\"}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <th scope=\"row\">Middle Line</th>\r\n                                                                <td>{this.props.gameData.bLWinnerData !== \"\" ? this.props.gameData.bLWinnerData.mobile : \"\"}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <th scope=\"row\">Full Housie</th>\r\n                                                                <td>{this.props.gameData.fHWinnerData !== \"\" ? this.props.gameData.fHWinnerData.mobile : \"\"}</td>\r\n                                                            </tr>\r\n                                                        </tbody>\r\n                                                    </Table>\r\n                                                </CardBody>\r\n                                            </Card>\r\n\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </CardBody>\r\n                            </Card>\r\n                            : <></>}\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dataArray: state.dataArray,\r\n        gameData: state\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectGame: (data) => dispatch(selectGame(data)),\r\n        selectNumber: (num) => dispatch(selectNumber(num)),\r\n        fetchWinners: (data) => dispatch(fetchWinners(data)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);\r\n\r\n\r\n","D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavBar.js",["70","71","72","73","74","75","76","77","78","79","80","81","82","83"],"D:\\Internship\\Housie\\frontend\\src\\Redux\\store.js",[],"D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Reducers.js",[],"D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Types.js",[],"D:\\Internship\\Housie\\frontend\\src\\Redux\\Housie\\Action.js",[],"D:\\Internship\\Housie\\frontend\\src\\Components\\Login.js",["84"],"import React, {useState, useEffect} from 'react'\r\nimport { Button, Card, CardBody, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap'\r\nimport axios from 'axios'\r\nimport NavBar from '../Layouts/NavBar';\r\nimport {store} from 'react-notifications-component'\r\n\r\nexport default function Login() {\r\n\r\n    const [email, setEmail] = useState()\r\n    const [password, setPassword] = useState()\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        axios.post(`http://localhost:3001/admin/login`, \r\n            {\r\n                email: email,\r\n                password: password\r\n            }\r\n        ).then(response => {\r\n            console.log(response)\r\n            if(response.data.statusCode === 404){\r\n                store.addNotification({\r\n                    title: \"Not Found\",\r\n                    message: \"User Not Found\",\r\n                    type: \"info\",\r\n                    insert: \"top\",\r\n                    container: \"top-right\",\r\n                    animationIn: [\"animated\", \"fadeIn\"],\r\n                    animationOut: [\"animated\", \"fadeOut\"],\r\n                    dismiss: {\r\n                      duration: 2000,\r\n                      onScreen: true\r\n                    }\r\n                  });\r\n            }\r\n            if(response.data.statusCode === 403){\r\n                alert(\"Wrong Password\")\r\n                store.addNotification({\r\n                    title: \"Not Found\",\r\n                    message: \"Wrong Password\",\r\n                    type: \"info\",\r\n                    insert: \"top\",\r\n                    container: \"top-right\",\r\n                    animationIn: [\"animated\", \"fadeIn\"],\r\n                    animationOut: [\"animated\", \"fadeOut\"],\r\n                    dismiss: {\r\n                      duration: 2000,\r\n                      onScreen: true\r\n                    }\r\n                  });\r\n            }\r\n            if(response.data.statusCode === 200){\r\n                store.addNotification({\r\n                    title: \"Login\",\r\n                    message: \"Login Successfully\",\r\n                    type: \"success\",\r\n                    insert: \"top\",\r\n                    container: \"top-right\",\r\n                    animationIn: [\"animated\", \"fadeIn\"],\r\n                    animationOut: [\"animated\", \"fadeOut\"],\r\n                    dismiss: {\r\n                      duration: 2000,\r\n                      onScreen: true\r\n                    }\r\n                  });\r\n                localStorage.setItem('tokn', response.data.token)\r\n                localStorage.setItem('usr', JSON.stringify(response.data.user))\r\n                window.location.href = \"/index\"\r\n            }\r\n        }).catch(error => {\r\n            console.log(error)\r\n            store.addNotification({\r\n                title: \"Login\",\r\n                message: \"Internal Server Error\",\r\n                type: \"info\",\r\n                insert: \"top\",\r\n                container: \"top-right\",\r\n                animationIn: [\"animated\", \"fadeIn\"],\r\n                animationOut: [\"animated\", \"fadeOut\"],\r\n                dismiss: {\r\n                  duration: 2000,\r\n                  onScreen: true\r\n                }\r\n              });\r\n        })\r\n\r\n    }\r\n    useEffect(() => {\r\n        if(localStorage.getItem('tokn')){\r\n            window.location.href = \"/index\"\r\n        }\r\n    }, [0])\r\n    return (\r\n        <React.Fragment>\r\n            <NavBar />\r\n            <div className=\"container vh-100 d-flex justify-content-center\" style={{flexDirection: \"column\"}}>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col md={5}>\r\n                        <Card className=\"shadow-sm text-left\">\r\n                            <CardBody>\r\n                                <h2>Login</h2>\r\n                                <p>Welcome to housie game.</p>\r\n                                <Form onSubmit={handleSubmit}>\r\n                                    <FormGroup>\r\n                                        <Label>Email</Label>\r\n                                        <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email\" onChange={(e)=>setEmail(e.target.value)} />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Password</Label>\r\n                                        <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" onChange={(e)=>setPassword(e.target.value)}/>\r\n                                    </FormGroup>\r\n                                    <Button block color=\"success\">Login</Button>\r\n                                </Form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","D:\\Internship\\Housie\\frontend\\src\\Components\\UserRegistration.js",["85","86"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Card, CardBody, Form, FormGroup, Label, Input, Row, Col, Alert } from 'reactstrap'\r\nimport { useForm } from 'react-hook-form'\r\nimport axios from 'axios'\r\nimport { store } from 'react-notifications-component'\r\n\r\nexport default function UserRegistration() {\r\n\r\n\r\n    const [isRegistrationSuccess, setIsRegistrationSuccess] = useState(false)\r\n\r\n    const { register, handleSubmit, errors } = useForm()\r\n\r\n    const onSubmit = (data) => {\r\n\r\n        console.log(data)\r\n        axios.post(`http://localhost:3001/user/registration`, data).then(response => {\r\n            console.log(response)\r\n\r\n            // alert(\"Created\")\r\n\r\n            if (response.data.statusCode === 201) {\r\n                store.addNotification({\r\n                    title: \"Error\",\r\n                    message: \"User Already Exists\",\r\n                    type: \"danger\",\r\n                    insert: \"top\",\r\n                    container: \"top-right\",\r\n                    animationIn: [\"animated\", \"fadeIn\"],\r\n                    animationOut: [\"animated\", \"fadeOut\"],\r\n                    dismiss: {\r\n                        duration: 2000,\r\n                        onScreen: true\r\n                    }\r\n                });\r\n            }\r\n            if (response.data.statusCode === 200) {\r\n                setIsRegistrationSuccess(true)\r\n                store.addNotification({\r\n                    title: \"Success\",\r\n                    message: \"Registration Successfull\",\r\n                    type: \"success\",\r\n                    insert: \"top\",\r\n                    container: \"top-right\",\r\n                    animationIn: [\"animated\", \"fadeIn\"],\r\n                    animationOut: [\"animated\", \"fadeOut\"],\r\n                    dismiss: {\r\n                        duration: 2000,\r\n                        onScreen: true\r\n                    }\r\n                });\r\n            }\r\n\r\n        }).catch(error => {\r\n            console.log(error)\r\n            store.addNotification({\r\n                title: \"Error\",\r\n                message: \"Internal Server Error\",\r\n                type: \"danger\",\r\n                insert: \"top\",\r\n                container: \"top-right\",\r\n                animationIn: [\"animated\", \"fadeIn\"],\r\n                animationOut: [\"animated\", \"fadeOut\"],\r\n                dismiss: {\r\n                    duration: 2000,\r\n                    onScreen: true\r\n                }\r\n            });\r\n        })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container vh-100 d-flex justify-content-center\" style={{ flexDirection: \"column\" }}>\r\n            <Row className=\"justify-content-center\">\r\n                <Col md={5}>\r\n                    <Card className=\"shadow-sm text-left\">\r\n                        <CardBody>\r\n                            <h2>Registration</h2>\r\n                            <p>Welcome to housie game.</p>\r\n                            {isRegistrationSuccess ?\r\n                                <Alert>Regsitration Successfull</Alert>\r\n                                :\r\n                                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <FormGroup>\r\n                                                <Label>Name</Label>\r\n                                                <input type=\"text\" className=\"form-control\" name=\"name\" id=\"name\" placeholder=\"Name\" ref={register({ required: true })} autocomplete=\"off\" />\r\n                                                {errors.name && <p className=\"text-danger\">Required</p>}\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <FormGroup>\r\n                                                <Label>Mobile</Label>\r\n                                                <input type=\"number\" className=\"form-control\" name=\"mobile\" id=\"mobile\" placeholder=\"Mobile\" ref={register({ required: true, validate: (val) => val && val.length === 10 })} />\r\n                                                {errors.mobile?.type === \"required\" && <p className=\"text-danger\">Required</p>}\r\n                                                {errors.mobile?.type === \"validate\" && <p className=\"text-danger\">Invalid Mobile</p>}\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Button block color=\"success\" outline type=\"submit\">Register</Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Form>\r\n                            }\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavbarComponents\\ShowAllGames.js",["87","88"],"import React, { useState, useEffect, Component } from 'react'\r\nimport { Button } from 'reactstrap'\r\nimport axios from 'axios'\r\nimport { MDBDataTable } from 'mdbreact'\r\nimport { connect } from 'react-redux'\r\nimport { selectGame, fetchWinners } from '../../Redux/Housie/Action'\r\nimport Swal from 'sweetalert2'\r\nimport { store } from 'react-notifications-component'\r\nimport Pagination from 'react-js-pagination'\r\n\r\n\r\nclass ShowAllGames extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            allGames: [],\r\n            isAllGamesReturned: false,\r\n            activeGameId: this.props.gameData.gameId,\r\n            activePage: 1,\r\n            numOfItems: 5,\r\n            documentCounts: 0\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.fetchPaginatedGame()\r\n    }\r\n\r\n    handleReduxDispatch = (data) => {\r\n\r\n\r\n        if (this.props.gameData.gameId !== \"\") {\r\n            if (this.props.gameData.gameId === data.gameId) {\r\n                Swal.fire({\r\n                    title: 'Confirm Stop?',\r\n                    text: 'Stop This Game?',\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonText: 'Confirm',\r\n                    cancelButtonText: 'Cancel'\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n                        axios.put(`http://localhost:3001/admin/game/stop/`, {\r\n                            gid: this.props.gameData.gameId\r\n                        }, {\r\n                            headers: {\r\n                                'Authorization': `Bearer ${localStorage.getItem('tokn')}`\r\n                            }\r\n                        })\r\n                            .then((response) => {\r\n                                console.log(response)\r\n                                if (response.data.statusCode === 404) {\r\n                                    // Swal.fire( response.data.message )\r\n                                    store.addNotification({\r\n                                        title: \"Info\",\r\n                                        message: \"Not Found\",\r\n                                        type: \"info\",\r\n                                        insert: \"top\",\r\n                                        container: \"top-right\",\r\n                                        animationIn: [\"animated\", \"fadeIn\"],\r\n                                        animationOut: [\"animated\", \"fadeOut\"],\r\n                                        dismiss: {\r\n                                            duration: 2000,\r\n                                            onScreen: true\r\n                                        }\r\n                                    });\r\n                                    return false;\r\n                                }\r\n                                if (response.data.statusCode === 200) {\r\n                                    console.log(\"Created\");\r\n                                    store.addNotification({\r\n                                        title: \"Started!\",\r\n                                        message: \"Game Stopped\",\r\n                                        type: \"success\",\r\n                                        insert: \"top\",\r\n                                        container: \"top-right\",\r\n                                        animationIn: [\"animated\", \"fadeIn\"],\r\n                                        animationOut: [\"animated\", \"fadeOut\"],\r\n                                        dismiss: {\r\n                                            duration: 2000,\r\n                                            onScreen: true\r\n                                        }\r\n                                    });\r\n\r\n                                    document.getElementById(this.props.gameData.gameId).innerHTML = \"Start\"\r\n                                    this.setState({\r\n                                        activeGameId: \"\"\r\n                                    })\r\n                                    this.props.selectGame(JSON.stringify({ gameId: \"\", gameName: \"\", gameDateTime: \"\", numUsers: \"\", done: \"\", uniqueName: \"\" }))\r\n                                    return true;\r\n\r\n\r\n                                }\r\n\r\n                            }).catch((error) => {\r\n                                this.setState({\r\n                                    submitDisabled: false\r\n                                })\r\n                                console.log(\"error\");\r\n                                console.log(error.status)\r\n                                store.addNotification({\r\n                                    title: \"Error!\",\r\n                                    message: \"Internal Server Error!\",\r\n                                    type: \"info\",\r\n                                    insert: \"top\",\r\n                                    container: \"top-right\",\r\n                                    animationIn: [\"animated\", \"fadeIn\"],\r\n                                    animationOut: [\"animated\", \"fadeOut\"],\r\n                                    dismiss: {\r\n                                        duration: 2000,\r\n                                        onScreen: true\r\n                                    }\r\n                                });\r\n                                return false;\r\n\r\n                            })\r\n                    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                        return\r\n                    }\r\n                })\r\n            } else {\r\n\r\n                Swal.fire({\r\n                    title: 'Start Another Game?',\r\n                    text: 'Stop Current Active Game and Start Another Game?',\r\n                    icon: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonText: 'Confirm',\r\n                    cancelButtonText: 'Cancel'\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n\r\n                        axios.put(`http://localhost:3001/admin/game/stop/`, {\r\n                            gid: this.props.gameData.gameId\r\n                        }, {\r\n                            headers: {\r\n                                'Authorization': `Bearer ${localStorage.getItem('tokn')}`\r\n                            }\r\n                        })\r\n                            .then((response) => {\r\n                                console.log(response)\r\n                                if (response.data.statusCode === 404) {\r\n                                    // Swal.fire( response.data.message )\r\n                                    store.addNotification({\r\n                                        title: \"Info\",\r\n                                        message: \"Not Found\",\r\n                                        type: \"info\",\r\n                                        insert: \"top\",\r\n                                        container: \"top-right\",\r\n                                        animationIn: [\"animated\", \"fadeIn\"],\r\n                                        animationOut: [\"animated\", \"fadeOut\"],\r\n                                        dismiss: {\r\n                                            duration: 2000,\r\n                                            onScreen: true\r\n                                        }\r\n                                    });\r\n                                    return false;\r\n                                }\r\n                                if (response.data.statusCode === 200) {\r\n                                    console.log(\"Created\");\r\n                                    store.addNotification({\r\n                                        title: \"Started!\",\r\n                                        message: \"Game Stopped\",\r\n                                        type: \"success\",\r\n                                        insert: \"top\",\r\n                                        container: \"top-right\",\r\n                                        animationIn: [\"animated\", \"fadeIn\"],\r\n                                        animationOut: [\"animated\", \"fadeOut\"],\r\n                                        dismiss: {\r\n                                            duration: 2000,\r\n                                            onScreen: true\r\n                                        }\r\n                                    });\r\n\r\n                                    document.getElementById(this.props.gameData.gameId).innerHTML = \"Start\"\r\n                                    this.setState({\r\n                                        activeGameId: \"\"\r\n                                    })\r\n                                    this.props.selectGame(JSON.stringify({ gameId: \"\", gameName: \"\", gameDateTime: \"\", numUsers: \"\", done: \"\", uniqueName: \"\" }))\r\n\r\n                                    this.startGame(data)\r\n                                    return true;\r\n\r\n\r\n                                }\r\n\r\n                            }).catch((error) => {\r\n                                this.setState({\r\n                                    submitDisabled: false\r\n                                })\r\n                                console.log(\"error\");\r\n                                console.log(error.status)\r\n                                store.addNotification({\r\n                                    title: \"Error!\",\r\n                                    message: \"Internal Server Error!\",\r\n                                    type: \"info\",\r\n                                    insert: \"top\",\r\n                                    container: \"top-right\",\r\n                                    animationIn: [\"animated\", \"fadeIn\"],\r\n                                    animationOut: [\"animated\", \"fadeOut\"],\r\n                                    dismiss: {\r\n                                        duration: 2000,\r\n                                        onScreen: true\r\n                                    }\r\n                                });\r\n                                return false;\r\n\r\n                            })\r\n\r\n\r\n\r\n                        // document.getElementById(this.props.gameData.gameId).innerHTML = \"Start\"\r\n                        // this.setState({\r\n                        //     activeGameId: \"\"\r\n                        // })\r\n\r\n                        // this.props.selectGame(JSON.stringify(data))\r\n                        // document.getElementById(data.gameId).innerHTML = \"Stop\"\r\n                        // return\r\n\r\n                    } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                        return\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n\r\n            this.startGame(data);\r\n\r\n        }\r\n    }\r\n\r\n    handlePagination = (pageNumber) => {\r\n        this.setState({\r\n            activePage: pageNumber,            \r\n        })\r\n        this.fetchPaginatedGame(pageNumber)\r\n    }\r\n\r\n    \r\n    startGame = (data) => {\r\n        let body = {\r\n            gid: data.gameId\r\n        }\r\n        axios.put(`http://localhost:3001/admin/game/start/`, body, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('tokn')}`\r\n            }\r\n        })\r\n            .then((response) => {\r\n                console.log(response)\r\n                if (response.data.statusCode === 404) {\r\n                    // Swal.fire( response.data.message )\r\n                    store.addNotification({\r\n                        title: \"Info\",\r\n                        message: \"Not Found\",\r\n                        type: \"info\",\r\n                        insert: \"top\",\r\n                        container: \"top-right\",\r\n                        animationIn: [\"animated\", \"fadeIn\"],\r\n                        animationOut: [\"animated\", \"fadeOut\"],\r\n                        dismiss: {\r\n                            duration: 2000,\r\n                            onScreen: true\r\n                        }\r\n                    });\r\n                    return false;\r\n                }\r\n                if (response.data.statusCode === 200) {\r\n                    console.log(\"Created\");\r\n                    store.addNotification({\r\n                        title: \"Started!\",\r\n                        message: \"Game Started\",\r\n                        type: \"success\",\r\n                        insert: \"top\",\r\n                        container: \"top-right\",\r\n                        animationIn: [\"animated\", \"fadeIn\"],\r\n                        animationOut: [\"animated\", \"fadeOut\"],\r\n                        dismiss: {\r\n                            duration: 2000,\r\n                            onScreen: true\r\n                        }\r\n                    });\r\n\r\n                    this.props.selectGame(JSON.stringify(data))\r\n                    this.props.fetchWinners(data.gameId)\r\n                    document.getElementById(data.gameId).innerHTML = \"Stop\"\r\n                    // return true;\r\n\r\n\r\n                }\r\n\r\n            }).catch((error) => {\r\n                this.setState({\r\n                    submitDisabled: false\r\n                })\r\n                console.log(\"error\");\r\n                console.log(error.status)\r\n                store.addNotification({\r\n                    title: \"Error!\",\r\n                    message: \"Internal Server Error!\",\r\n                    type: \"info\",\r\n                    insert: \"top\",\r\n                    container: \"top-right\",\r\n                    animationIn: [\"animated\", \"fadeIn\"],\r\n                    animationOut: [\"animated\", \"fadeOut\"],\r\n                    dismiss: {\r\n                        duration: 2000,\r\n                        onScreen: true\r\n                    }\r\n                });\r\n                return false;\r\n\r\n            })\r\n    }\r\n\r\n\r\n\r\n    fetchPaginatedGame = (pageNum = 1) => {\r\n        axios.get(`http://localhost:3001/admin/game/paginated/?page=${pageNum}&items=${this.state.numOfItems}`, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem(\"tokn\")}`\r\n            }\r\n        }).then(response => {\r\n            console.log(response.data)\r\n            if (response.data.statusCode === 200) {\r\n                let rowsData = []\r\n                for (var i = 0; i < response.data.paginatedGames.length; i++) {\r\n                    let rowItem = response.data.paginatedGames[i]\r\n                    console.log(rowItem)\r\n                    rowItem[\"gameDate\"] = `${new Date(response.data.paginatedGames[i].gameDate)}`.substr(0, 25)\r\n                    rowItem[\"usersCount\"] = response.data.paginatedGames[i].users\r\n                    rowItem[\"playBtn\"] = <Button id={rowItem._id} onClick={() => this.handleReduxDispatch({ gameId: rowItem._id, gameName: rowItem.name, gameDateTime: rowItem.gameDate, numUsers: rowItem.usersCount, done: rowItem.done, uniqueName: rowItem.uniqueName })} className=\"btn btn-danger py-0 px-3\">{this.state.activeGameId === rowItem._id ? \"Stop\" : \"Start\"}</Button>\r\n\r\n                    rowsData.push(rowItem)\r\n                }\r\n                this.setState({\r\n                    allGames: rowsData,\r\n                    documentCounts: response.data.gamesCount,\r\n                    isAllGamesReturned: true\r\n                })\r\n            }\r\n\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const columnData = [\r\n            {\r\n                label: 'Name',\r\n                field: 'name',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                label: 'Unique Name',\r\n                field: 'uniqueName',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                label: 'Game Date/Time',\r\n                field: 'gameDate',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                label: 'Users',\r\n                field: 'usersCount',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                label: 'Action',\r\n                field: 'playBtn',\r\n                sort: 'asc',\r\n            },\r\n        ]\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.isAllGamesReturned ?\r\n                    <div>\r\n                        <MDBDataTable\r\n                            \r\n                            bordered\r\n                            entries={this.state.numOfItems}                            \r\n                            striped\r\n                            paging={false}\r\n                            data={{\r\n                                columns: columnData,\r\n                                rows: this.state.allGames\r\n                            }}\r\n                        />\r\n                        <Pagination \r\n                            itemClass=\"page-item\"\r\n                            linkClass=\"page-link\"\r\n                            activePage={this.state.activePage}\r\n                            itemsCountPerPage={this.state.numOfItems}\r\n                            totalItemsCount={this.state.documentCounts}\r\n                            pageRangeDisplayed={5}\r\n                            onChange={(val)=> this.handlePagination(val)}\r\n                        />\r\n                    </div>\r\n                    : <></>}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        gameData: state\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectGame: (data) => dispatch(selectGame(data)),\r\n        fetchWinners: (data) => dispatch(fetchWinners(data)),\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowAllGames);","D:\\Internship\\Housie\\frontend\\src\\Layouts\\NavbarComponents\\CreateGameForm.js",[],"D:\\Internship\\Housie\\frontend\\src\\Components\\IndexComponents\\ShowTable.js",["89","90","91","92","93"],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":8,"nodeType":"100","messageId":"101","endLine":1,"endColumn":12},{"ruleId":"98","severity":1,"message":"102","line":2,"column":28,"nodeType":"100","messageId":"101","endLine":2,"endColumn":36},{"ruleId":"98","severity":1,"message":"103","line":2,"column":38,"nodeType":"100","messageId":"101","endLine":2,"endColumn":47},{"ruleId":"98","severity":1,"message":"104","line":9,"column":10,"nodeType":"100","messageId":"101","endLine":9,"endColumn":22},{"ruleId":"98","severity":1,"message":"102","line":1,"column":28,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"103","line":1,"column":38,"nodeType":"100","messageId":"101","endLine":1,"endColumn":47},{"ruleId":"98","severity":1,"message":"105","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":16},{"ruleId":"98","severity":1,"message":"106","line":2,"column":18,"nodeType":"100","messageId":"101","endLine":2,"endColumn":21},{"ruleId":"98","severity":1,"message":"107","line":2,"column":23,"nodeType":"100","messageId":"101","endLine":2,"endColumn":31},{"ruleId":"98","severity":1,"message":"108","line":2,"column":77,"nodeType":"100","messageId":"101","endLine":2,"endColumn":81},{"ruleId":"98","severity":1,"message":"109","line":2,"column":83,"nodeType":"100","messageId":"101","endLine":2,"endColumn":92},{"ruleId":"98","severity":1,"message":"110","line":2,"column":94,"nodeType":"100","messageId":"101","endLine":2,"endColumn":99},{"ruleId":"98","severity":1,"message":"111","line":2,"column":101,"nodeType":"100","messageId":"101","endLine":2,"endColumn":106},{"ruleId":"98","severity":1,"message":"112","line":2,"column":183,"nodeType":"100","messageId":"101","endLine":2,"endColumn":186},{"ruleId":"98","severity":1,"message":"113","line":3,"column":9,"nodeType":"100","messageId":"101","endLine":3,"endColumn":16},{"ruleId":"98","severity":1,"message":"114","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":13},{"ruleId":"98","severity":1,"message":"115","line":5,"column":9,"nodeType":"100","messageId":"101","endLine":5,"endColumn":14},{"ruleId":"98","severity":1,"message":"104","line":6,"column":10,"nodeType":"100","messageId":"101","endLine":6,"endColumn":22},{"ruleId":"116","severity":1,"message":"117","line":93,"column":9,"nodeType":"118","endLine":93,"endColumn":10},{"ruleId":"98","severity":1,"message":"103","line":1,"column":27,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"110","line":2,"column":58,"nodeType":"100","messageId":"101","endLine":2,"endColumn":63},{"ruleId":"98","severity":1,"message":"102","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":25},{"ruleId":"98","severity":1,"message":"103","line":1,"column":27,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"119","line":2,"column":17,"nodeType":"100","messageId":"101","endLine":2,"endColumn":26},{"ruleId":"98","severity":1,"message":"112","line":5,"column":26,"nodeType":"100","messageId":"101","endLine":5,"endColumn":29},{"ruleId":"98","severity":1,"message":"106","line":5,"column":31,"nodeType":"100","messageId":"101","endLine":5,"endColumn":34},{"ruleId":"116","severity":1,"message":"120","line":23,"column":8,"nodeType":"121","endLine":23,"endColumn":11,"suggestions":"122"},{"ruleId":"116","severity":1,"message":"117","line":23,"column":9,"nodeType":"118","endLine":23,"endColumn":10},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'MDBDataTable' is defined but never used.","'Button' is defined but never used.","'Col' is defined but never used.","'Dropdown' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'Label' is defined but never used.","'Row' is defined but never used.","'useForm' is defined but never used.","'axios' is defined but never used.","'store' is defined but never used.","react-hooks/exhaustive-deps","The 0 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","'Component' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchCompletedUsers'. Either include it or remove the dependency array.","ArrayExpression",["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},"Update the dependencies array to be: [fetchCompletedUsers]",{"range":"128","text":"129"},[600,603],"[fetchCompletedUsers]"]